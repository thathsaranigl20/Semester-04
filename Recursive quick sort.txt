#include <iostream>
#include <chrono>
#include <cstdlib>
#include <ctime>
//quick sort recursive method

using namespace std;
using namespace std::chrono;

void quicksort(int*, int, int);
int partition(int*, int, int);

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;
    int* arr = new int[n];
    srand(time(NULL)); // seed for random number generator
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100;
    }

    clock_t start = clock();//time counting
    quicksort(arr, 0,n-1);
    clock_t end = clock();

    
    double duration = double(end - start) / CLOCKS_PER_SEC;
    cout << "Time for quick sort: " << duration << " seconds" << endl;// time output


    delete[] arr;
    return 0;
}

void quicksort(int* arr, int low, int high) {
    if (low < high) {
        int pivot = partition(arr, low, high);
        quicksort(arr, low, pivot-1);
        quicksort(arr, pivot+1, high);
    }
}

int partition(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j <= high-1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i+1], arr[high]);
    return i+1;
}
